// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

func AnyString(s []string, assert func(string) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllString(s []string, assert func(string) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyInt(s []int, assert func(int) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllInt(s []int, assert func(int) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyInt32(s []int32, assert func(int32) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllInt32(s []int32, assert func(int32) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyInt64(s []int64, assert func(int64) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllInt64(s []int64, assert func(int64) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyUint32(s []uint32, assert func(uint32) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllUint32(s []uint32, assert func(uint32) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyUint64(s []uint64, assert func(uint64) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllUint64(s []uint64, assert func(uint64) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}

func AnyBool(s []bool, assert func(bool) bool) bool {
	for i := 0; i < len(s); i++ {
		if assert(s[i]) {
			return true
		}
	}
	return false
}

func AllBool(s []bool, assert func(bool) bool) bool {
	for i := 0; i < len(s); i++ {
		if !assert(s[i]) {
			return false
		}
	}
	return true
}
