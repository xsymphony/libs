// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

// RemoveBool在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveBool(s, element)`
func RemoveBool(s []bool, element bool) []bool {
	t := make([]bool, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveByte在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveByte(s, element)`
func RemoveByte(s []byte, element byte) []byte {
	t := make([]byte, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveComplex128在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveComplex128(s, element)`
func RemoveComplex128(s []complex128, element complex128) []complex128 {
	t := make([]complex128, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveComplex64在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveComplex64(s, element)`
func RemoveComplex64(s []complex64, element complex64) []complex64 {
	t := make([]complex64, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveError在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveError(s, element)`
func RemoveError(s []error, element error) []error {
	t := make([]error, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveFloat32在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveFloat32(s, element)`
func RemoveFloat32(s []float32, element float32) []float32 {
	t := make([]float32, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveFloat64在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveFloat64(s, element)`
func RemoveFloat64(s []float64, element float64) []float64 {
	t := make([]float64, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveInt在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveInt(s, element)`
func RemoveInt(s []int, element int) []int {
	t := make([]int, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveInt16在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveInt16(s, element)`
func RemoveInt16(s []int16, element int16) []int16 {
	t := make([]int16, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveInt32在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveInt32(s, element)`
func RemoveInt32(s []int32, element int32) []int32 {
	t := make([]int32, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveInt64在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveInt64(s, element)`
func RemoveInt64(s []int64, element int64) []int64 {
	t := make([]int64, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveInt8在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveInt8(s, element)`
func RemoveInt8(s []int8, element int8) []int8 {
	t := make([]int8, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveRune在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveRune(s, element)`
func RemoveRune(s []rune, element rune) []rune {
	t := make([]rune, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveString在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveString(s, element)`
func RemoveString(s []string, element string) []string {
	t := make([]string, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUint在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUint(s, element)`
func RemoveUint(s []uint, element uint) []uint {
	t := make([]uint, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUint16在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUint16(s, element)`
func RemoveUint16(s []uint16, element uint16) []uint16 {
	t := make([]uint16, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUint32在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUint32(s, element)`
func RemoveUint32(s []uint32, element uint32) []uint32 {
	t := make([]uint32, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUint64在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUint64(s, element)`
func RemoveUint64(s []uint64, element uint64) []uint64 {
	t := make([]uint64, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUint8在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUint8(s, element)`
func RemoveUint8(s []uint8, element uint8) []uint8 {
	t := make([]uint8, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}

// RemoveUintptr在切片移除指定的元素，返回一个新的切片
// usage:
// 移除元素: `RemoveUintptr(s, element)`
func RemoveUintptr(s []uintptr, element uintptr) []uintptr {
	t := make([]uintptr, 0, len(s))
	for _, i := range s {
		if i == element {
			continue
		}
		t = append(t, i)
	}
	return t
}
